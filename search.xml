<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Debian 删除apache2</title>
    <url>/20915/</url>
    <content><![CDATA[<p>首先停止apache2 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service apache2 stop</span><br></pre></td></tr></table></figure>
<p>使用命令查看到服务已经停止。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status apache2 </span><br></pre></td></tr></table></figure>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/Iu3vS6E.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">停止运行apache
    </div>
</center>
<p>依次输入如下命令删除apache2对应的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt --purge remove apache2 -y</span><br><span class="line">apt --purge remove apache2-doc -y</span><br><span class="line">apt --purge remove apache2-data -y</span><br><span class="line">apt --purge remove apache2-bin -y</span><br><span class="line">apt --purge remove apache2-utils -y</span><br></pre></td></tr></table></figure>
<p>检查是否有残留文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -l | grep apache2</span><br></pre></td></tr></table></figure>
<p>当显示没有文件存在时(显示空白，没有任何输出)表明卸载完成。</p>
]]></content>
      <tags>
        <tag>Debian Linus apache nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo blog 搭建</title>
    <url>/45138/</url>
    <content><![CDATA[<h1 id="快速开始"><a class="markdownIt-Anchor" href="#快速开始"></a> 快速开始</h1>
<p>‌‌‌ 　　首先确保您的设备上安装了相关软件，包括以下应用程序[^1]：</p>
<p>‌‌‌ 　　- Node.js (按目前来说应该是 16.x 以上的版本)<br />
‌‌‌ 　　- Git</p>
<h3 id="安装-hexo"><a class="markdownIt-Anchor" href="#安装-hexo"></a> 安装 Hexo</h3>
<p>‌‌‌ 　　完成所有必需的软件安装后，即可以使用 npm 安装 Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">‌‌‌　　npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h3 id="初始化项目"><a class="markdownIt-Anchor" href="#初始化项目"></a> 初始化项目</h3>
<p>‌‌‌ 　　在您想存放博客文件的地方使用命令行在该位置打开。使用以下命令以创建一个 Hexo 项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">‌‌‌　　hexo init Blog</span><br></pre></td></tr></table></figure>
<p>‌‌‌ 　　这样便在当前文件夹下创建了一个名为<code>blog</code>的文件夹，该位置便是您博客的根目录</p>
<h3 id="安装第三方主题"><a class="markdownIt-Anchor" href="#安装第三方主题"></a> 安装第三方主题</h3>
<p>‌‌‌ 　　在 Hexo 5.0 版本上，可以使用 npm 安装主题。以<a href="https://github.com/MaLuns/hexo-theme-async/blob/master/README_zh-CN.md">hexo-theme-async</a> 为例[^2]：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">‌‌‌　　npm i hexo-theme-async@latest</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意, 有些主题可能需要安装其他依赖才能正确显示, 为确保正确安装, 请参考对应主题的官方安装文档操作<br />
如 async 主题需要 <code>ejs</code> 和 <code>less</code> 的渲染器, 需要提前安装好.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">‌‌‌　　npm install --save hexo-renderer-less hexo-renderer-ejs</span><br></pre></td></tr></table></figure>
<p>‌‌‌ 　　安装完成后在根目录下的<code>_congif.yml</code>中修改 <code>theme</code> 字段为 <code>async</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="string">‌‌‌</span>　　<span class="attr">theme:</span> <span class="string">async</span></span><br></pre></td></tr></table></figure>
<h3 id="配置第三方主题"><a class="markdownIt-Anchor" href="#配置第三方主题"></a> 配置第三方主题</h3>
<p>‌‌‌ 　　使用 npm 安装的第三方主题修改配置需要在根目录下新建文件<code>_config.async.yml</code> 具体名称需要根据您所安装的主题修改, 我这里使用的是<code>async</code>主题, 所以配置文件含有 <strong>async</strong> 字段<br />
‌‌‌ 　　您仅需在  <code>_config.async.yml</code>  中自定义您想要覆盖的配置，其余将自动与主题默认配置合并.<br />
‌‌‌ 　　为确保您能正确了解主题的所有配置, 建议是到主题的源码处复制对应的<a href="https://github.com/MaLuns/hexo-theme-async/blob/master/package/hexo-theme-async/_config.yml">yaml 配置文件</a></p>
<h3 id="快速本地部署"><a class="markdownIt-Anchor" href="#快速本地部署"></a> 快速本地部署</h3>
<p>‌‌‌ 　　在博客的根目录下使用命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">‌‌‌　　hexo g</span><br></pre></td></tr></table></figure>
<p>‌‌‌ 　　即可完成对博客的静态网页编译(generate)</p>
<p>‌‌‌ 　　而使用命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">‌‌‌　　hexo s</span><br></pre></td></tr></table></figure>
<p>‌‌‌ 　　即可在本地完成部署, 成功后会显示:</p>
<p>‌‌‌ 　　<center><br />
<img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/3JgYDst.png"><br />
<br></p>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">本地部署示意
</div>
‌‌‌ 　　</center>
<p>‌‌‌ 　　此时, 在浏览器打开 <code>http://localhost:4000/</code> 即可看到您部署的网页:</p>
<p>‌‌‌ 　　<center><br />
<img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/OmCepeO.png"><br />
<br></p>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">部署您的第一个博客
</div>
‌‌‌ 　　</center>
<p>‌‌‌ 　　若要清除编译后的静态网页, 使用以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">‌‌‌　　hexo c</span><br></pre></td></tr></table></figure>
<p>‌‌‌ 　　此时, 博客根目录下的 <code>/public</code> 目录便被删除</p>
<hr />
<h1 id="2-将网页部署到-githubio"><a class="markdownIt-Anchor" href="#2-将网页部署到-githubio"></a> 2 将网页部署到 <a href="http://github.io">github.io</a></h1>
<p>‌‌‌ 　　静态博客在网络上发布的一般流程是: <strong>写好文章-&gt; 本地生成静态页面 -&gt; 将网站所需要的文件单独上传 -&gt; 发布成功 -&gt;(可选)上传完整站点数据备份。</strong></p>
<p>‌‌‌ 　　为简化我们操作, 回归专心于写作, 我将其简化成如下工作流: <strong>本地上传仓库 a -&gt; github action 自动部署 -&gt; 推送到仓库 b，网站展示</strong> [^3]</p>
<h3 id="创建仓库"><a class="markdownIt-Anchor" href="#创建仓库"></a> 创建仓库</h3>
<p>‌‌‌ 　　这里的两个仓库 a, b 分别储存博客的完整源代码, 博客静态编译后的用于发布展示的代码<br />
‌‌‌ 　　由于使用 Github action 需要使用到自己的私钥,强烈建议仓库 a 设置为私有, 而仓库 b 可以凭个人喜好设置为公有或者私有</p>
<p>‌‌‌ 　　 1. 在自己的 github 账号上创建两个仓库, 其中用于展示发布的仓库 b 的仓库名设置为 <code>您的GitHub用户名.github.io</code> . 这样是方便后续我们使用 <code>用户名.github.io</code> 来访问博客</p>
<p>‌‌‌ 　　 2. 将自己的网站完整源代码推送到仓库 a, 这里推荐使用 vscode 的 source control 直接可视化操作</p>
<p>‌‌‌ 　　<center><br />
<img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/GJjWSJW.png"><br />
<br></p>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">使用 VsCode 完成推送
</div>
‌‌‌ 　　</center>
<p>‌‌‌ 　　完成后打开网页即可查看自己的推送结果</p>
<h3 id="配置-github-action"><a class="markdownIt-Anchor" href="#配置-github-action"></a> 配置 GitHub Action</h3>
<p>‌‌‌ 　　 1. 这里我使用了 <code>peaceiris/actions-gh-pages</code> 的配置文件,在根目录下的 <code>.github</code> 目录下创建文件夹 <code>workflow</code> ,然后在该文件夹下创建新的<code>.yml</code> 文件<br />
将对应的配置代码写进去即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">‌‌‌</span>　　<span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">Pages</span></span><br><span class="line"><span class="string">‌‌‌</span>　　<span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;master&quot;</span></span><br><span class="line"><span class="string">‌‌‌</span>　　<span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">repositories</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">true</span> <span class="comment"># Fetch Hexo themes (true OR recursive)</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span> <span class="comment"># Fetch all history for .GitInfo and .Lastmod</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">16.</span><span class="string">x</span> <span class="comment"># 这里填上您设备对应的Node.js 版本</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">yarn</span> <span class="string">&amp;</span> <span class="string">Install</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">borales/actions-yarn@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">cmd:</span> <span class="string">install</span> <span class="comment"># will run `yarn install` command</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">yarn</span> <span class="string">clean</span></span><br><span class="line">          <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">personal_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PERSONAL_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">external_repository:</span> <span class="string">&lt;username&gt;/&lt;username&gt;.github.io</span></span><br><span class="line">          <span class="attr">publish_branch:</span> <span class="string">master</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure>
<p>‌‌‌ 　　 2. 根据自己情况修改<code>jobs:steps:uses</code>和<code>external_repository:(代码仓库b的地址)</code>即可。</p>
<p>‌‌‌ 　　 3. 注意到配置文件中有一个<code>personal_token: $&#123;&#123; secrets.PERSONAL_TOKEN &#125;&#125;</code>，我们需要创建个人私钥来完成推送</p>
<p>具体操作参照<a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">官方文档</a> 这里如果需要无过期的私钥，创建 classic 的私钥即可，把 repo 和 workflows 勾选上，然后到 a 仓库的 Secrect and action 界面填上自己的 key. 注意 title 要写成 <code>PERSONAL_TOKEN</code></p>
<p>GitHub Free Plan 帐户不能使用私有仓库中的 GitHub 页面。要将源内容设为私有并使用 GitHub Pages 进行部署，您可以使用此选项将站点从私有存储库部署到公共存储库。</p>
<ul>
<li><code>peaceiris/homepage</code>: A private repository running this action with <code>external_repository: peaceiris/peaceiris.github.io</code></li>
<li><code>peaceiris/peaceiris.github.io</code>: A public repository using GitHub Pages</li>
</ul>
<p>‌‌‌ 　　<center><br />
<img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/HYRuLyq.png"><br />
<br></p>
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">私钥创建
</div>
‌‌‌ 　　</center>
<p>‌‌‌ 　　 4. 创建完成后, 每次推送代码到仓库 a, 代码仓库 B 都能同步更新.</p>
<h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h1>
<p>‌‌‌ 　　[^1]: <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a><br />
‌‌‌ 　　[^2]: <a href="https://blog.esunr.xyz/2022/06/64163235c30f.html">https://blog.esunr.xyz/2022/06/64163235c30f.html</a><br />
‌‌‌ 　　[^3]: <a href="https://allworldg.xyz/dev/guide-to-setup-blog-with-zero-cost-1/">https://allworldg.xyz/dev/guide-to-setup-blog-with-zero-cost-1/</a><br />
‌‌‌</p>
]]></content>
      <tags>
        <tag>Hexo 前端 博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>OVZ机型迅速搭建x-ui面板搭建梯子</title>
    <url>/47675/</url>
    <content><![CDATA[<h1 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h1>
<h3 id="vps-准备"><a class="markdownIt-Anchor" href="#vps-准备"></a> VPS 准备</h3>
<h4 id="购买vps"><a class="markdownIt-Anchor" href="#购买vps"></a> 购买VPS</h4>
<h4 id="开始tuntap"><a class="markdownIt-Anchor" href="#开始tuntap"></a> 开始TUN/TAP</h4>
<h3 id="域名准备"><a class="markdownIt-Anchor" href="#域名准备"></a> 域名准备</h3>
<h4 id="购买域名"><a class="markdownIt-Anchor" href="#购买域名"></a> 购买域名</h4>
<h4 id="迁移域名到cloudflare解析"><a class="markdownIt-Anchor" href="#迁移域名到cloudflare解析"></a> 迁移域名到cloudflare解析</h4>
<h4 id="设置二级域名解析"><a class="markdownIt-Anchor" href="#设置二级域名解析"></a> 设置二级域名解析</h4>
<h3 id="ssh-工具"><a class="markdownIt-Anchor" href="#ssh-工具"></a> SSH 工具</h3>
<hr />
<h1 id="系统初始化"><a class="markdownIt-Anchor" href="#系统初始化"></a> 系统初始化</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line">apt update -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加shots NDS解析记录（防止ipv6解析失败403)</span></span><br><span class="line"><span class="comment"># 这一步暂时跳过，如果后面使用wget命令</span></span><br><span class="line"><span class="comment"># 运行别人的脚本时发现一直在连接</span></span><br><span class="line"><span class="comment"># 且连接的域名ip为ipv6</span></span><br><span class="line"><span class="comment"># 可以添加对应的ipv4地址到hosts</span></span><br><span class="line"><span class="comment"># 最后刷新DNS缓存</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># OVZ配置BBR</span></span><br><span class="line">wget --no-cache -O lkl-haproxy.sh https://github.com/mzz2017/lkl-haproxy/raw/master/lkl-haproxy.sh &amp;&amp; bash lkl-haproxy.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 x-ui</span></span><br><span class="line">bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载apache2（部分debian机型重装自带）</span></span><br><span class="line"><span class="comment"># 最后一条命令是检查有没有残留，如果有继续使用命令删除</span></span><br><span class="line">service apache2 stop</span><br><span class="line">apt --purge remove apache2 -y</span><br><span class="line">apt --purge remove apache2-doc -y</span><br><span class="line">apt --purge remove apache2-data -y</span><br><span class="line">apt --purge remove apache2-bin -y</span><br><span class="line">apt --purge remove apache2-utils -y</span><br><span class="line">dpkg -l | grep apache2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">apt install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装acme： </span></span><br><span class="line">curl https://get.acme.sh | sh </span><br><span class="line"></span><br><span class="line"><span class="comment">#添加软链接： </span></span><br><span class="line"><span class="built_in">ln</span> -s /root/.acme.sh/acme.sh /usr/local/bin/acme.sh </span><br><span class="line"></span><br><span class="line"><span class="comment">#切换CA机构： </span></span><br><span class="line">acme.sh --set-default-ca --server letsencrypt </span><br><span class="line"></span><br><span class="line"><span class="comment">#申请证书： </span></span><br><span class="line"><span class="comment"># 域名可以是二级域名</span></span><br><span class="line">acme.sh --issue -d vps.jiefengzhou.com -k ec-256 --webroot /var/www/html</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装证书&amp;重载nginx:</span></span><br><span class="line">acme.sh --install-cert -d vps.jiefengzhou.com --ecc --key-file /etc/x-ui/server.key --fullchain-file /etc/x-ui/server.crt --reloadcmd <span class="string">&quot;systemctl force-reload nginx&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>host更改教程：[[<a href="http://xn--VPSraw-kb9lk1m8utuu6f.githubusercontent.com">VPS无法连接raw.githubusercontent.com</a> 解决方法]]<br />
BBR加速配置： [[OpenVZ 机型vps 开启BBR加速]]<br />
删除apache2： [[Debian 删除apache2]]</p>
</blockquote>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/L3OtXew.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">证书安装完成且重载nginx
    </div>
</center>
<hr />
<h1 id="站点伪装"><a class="markdownIt-Anchor" href="#站点伪装"></a> 站点伪装</h1>
<h3 id="配置x-ui面板"><a class="markdownIt-Anchor" href="#配置x-ui面板"></a> 配置x-ui面板</h3>
<p>输入自己的VPS IP 后面加上自己的x-ui端口 如 <code>test.yourdomain.com:xxxx</code></p>
<p>进去后首先更改自己的xray内核，替换到第二新的版本，然后添加一个节点</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/IT8AWnY.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">ws路径那里直接复制自己的uuid进来就行
    </div>
</center>
<p>然后回到面板设置，凭自己喜好更改 <strong>监听端口</strong> 和 <strong>面板根路径</strong>（这根路径是减低别人暴力扫描的威胁）但是一定要记住这几个值，后续需要用到。</p>
<blockquote>
<p>值得注意的是，有些版本的根路径好像不能识别 <code>-</code>，所以如果后面你配置好nginx后无法打开，考虑是否是这个问题。<br />
可以配置好x-ui后先执行 <code>systemctl stop nginx</code> 把代理服务关闭，直接输入 <code>自己的VPSip:端口/路径</code> 试下能否打开，如果可以，那么进行到下一步，把nginx重新打开 <code>systemctl restart nginx</code></p>
</blockquote>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/hgFeoH2.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">这里我的url路径后面就是无法打开，结尾还有个/没写
    </div>
</center>
<p>完成后重启面板，使用新的端口+uuid登录。格式为<code>VPS对应IP:设定端口/你的路径</code><br />
你会发现自己还是登录不上，这是因为你的nginx代理还没有配置好</p>
<h3 id="寻找站点"><a class="markdownIt-Anchor" href="#寻找站点"></a> 寻找站点</h3>
<p>谷歌搜索关键词：intext: 登录 Cloudreve （这是个人网盘网站的关键词）<br />
找一个打开后不会重定向到登录界面的网页，记录它的地址。</p>
<p>（我之前找了一个会重定向的，后面输入面板地址老是在你末尾添加参数如<code>/login.php/</code> 导致无法正常访问面板）</p>
<h3 id="配置nginx"><a class="markdownIt-Anchor" href="#配置nginx"></a> 配置Nginx</h3>
<p>使用SSH工具 直接打开nginx配置文件<br />
这里我使用 <code>FinalShell</code> 打开 <code>/etc/nginx/nginx.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /etc/nginx/modules-enabled/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    sendfile on;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    gzip on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        </span><br><span class="line">        server_name vps.jiefengzhou.com;  <span class="comment">#你的域名</span></span><br><span class="line">        ssl_certificate       /etc/x-ui/server.crt;  <span class="comment">#证书位置</span></span><br><span class="line">        ssl_certificate_key   /etc/x-ui/server.key; <span class="comment">#私钥位置</span></span><br><span class="line">        </span><br><span class="line">        ssl_session_timeout 1d;</span><br><span class="line">        ssl_session_cache shared:MozSSL:10m;</span><br><span class="line">        ssl_session_tickets off;</span><br><span class="line">        ssl_protocols    TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_prefer_server_ciphers off;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass https://bgin.com/; <span class="comment">#伪装网址</span></span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_ssl_server_name on;</span><br><span class="line">            sub_filter_once off;</span><br><span class="line">            sub_filter <span class="string">&quot;bgin.com&quot;</span> <span class="variable">$server_name</span>; <span class="comment"># 仅域名</span></span><br><span class="line">            proxy_set_header Host <span class="string">&quot;bgin.com&quot;</span>; <span class="comment"># 仅域名</span></span><br><span class="line">            proxy_set_header Referer <span class="variable">$http_referer</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header User-Agent <span class="variable">$http_user_agent</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">            proxy_set_header Accept-Encoding <span class="string">&quot;&quot;</span>;</span><br><span class="line">            proxy_set_header Accept-Language <span class="string">&quot;zh-CN&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location /37e00ca3-3fba-4f5e-ae59-4a03b285a6ea &#123;   <span class="comment">#节点ws路径</span></span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_pass http://127.0.0.1:10000; <span class="comment">#你的节点端口</span></span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location /xui &#123;   <span class="comment">#xui路径</span></span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_pass http://127.0.0.1:52345;  <span class="comment">#xui监听端口</span></span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        location /.well-known/ &#123;</span><br><span class="line">               root /var/www/html;</span><br><span class="line">            &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">                rewrite ^(.*)$ https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>文件配置好后复制覆盖到源文件， <code>Ctrl + S</code> 保存退出， 可以看到文件已被上传。</p>
<p>然后访问 <code>test.yourdomain.com</code> 发现已经变成了自己伪装的网站，而访问 <code>test.yourdomain.com/你的x-ui路径</code> 变成了面板入口，这时你的伪装就成功了。</p>
]]></content>
      <tags>
        <tag>OVZ VPS X-ui 梯子</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS无法连接raw.githubusercontent.com 解决方法</title>
    <url>/57544/</url>
    <content><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1>
<p>我前段时间搞了个ipv6的vps, 大部分情况下使用 <code>wget</code> 命令下载文件返回的地址是ipv4, 但是有些地址（比如我机器对于 <em><a href="http://raw.githubusercontent.com">raw.githubusercontent.com</a></em> 返回的却是 ipv6 地址，然后就会出现大概率连接不上的情况，在443 time out 中循环。后面修改了host后，默认DNS解析到hosts文件中标记的ipv4 地址，下载速度回到正常。</p>
<hr />
<h1 id="查找网站对应的ipv4地址"><a class="markdownIt-Anchor" href="#查找网站对应的ipv4地址"></a> 查找网站对应的IPv4地址</h1>
<p>在网站 <code>ipaddress.com</code> 中搜索你对应网站的ip地址，比如我搜索的 <strong><a href="http://raw.githubusercontent.com">raw.githubusercontent.com</a></strong> 中得到了如下几个IP地址：</p>
<blockquote>
<ul>
<li>185.199.108.133</li>
<li>185.199.109.133</li>
<li>185.199.110.133</li>
<li>185.199.111.133</li>
</ul>
</blockquote>
<p>选择其中一个放到你的hosts文件中即可。</p>
<h1 id="修改vps的hosts文件"><a class="markdownIt-Anchor" href="#修改vps的hosts文件"></a> 修改VPS的hosts文件</h1>
<p>使用SSH工具连接上vps后，键入指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>
<p>非管理员用户可能提示权限不足，前面还需要加上 <code>sudo</code> 提权</p>
<p>进入后就是 vim 的一般模式， 键入 <code>i</code> 进入插入模式，使用方向键移动光标到底部， 然后输入自己对应网站的ip地址，后面连续键入两个制表符<code>TAB</code> 缩进， 键入对应的网站</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/Q4KRVk3.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">VIM 编辑hosts
    </div>
</center>
<p>完成编辑后 按 <code>ESC</code> 回到一般模式， 最后键入 <code>:wq</code> 保存并退出</p>
<h1 id="刷新dns缓存"><a class="markdownIt-Anchor" href="#刷新dns缓存"></a> 刷新DNS缓存</h1>
<p>相关指令网上有很多，我使用的是Debian10 系统，所以输入如下指令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/networking restart</span><br></pre></td></tr></table></figure>
<p>同理，无权限请在开头加上 <code>sudo</code> 提权</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/2S7zTZU.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">刷新DNS缓存完成
    </div>
</center>
<hr />
<p>一键写入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;185.199.108.133 \t\t raw.githubusercontent.com&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;128.1.164.230 \t\t www.aapanel.com&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line">/etc/init.d/networking restart </span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Linus DNS VPS hosts</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 11 安装WSA andorid 13 + play store + magisk</title>
    <url>/24452/</url>
    <content><![CDATA[<h1 id="安装准备"><a class="markdownIt-Anchor" href="#安装准备"></a> 安装准备</h1>
<h3 id="操作设备规格"><a class="markdownIt-Anchor" href="#操作设备规格"></a> 操作设备规格：</h3>
<p>本人所使用的设备操作系统信息为：<br />
版本	Windows 11 专业工作站版 Insider Preview<br />
版本	22H2<br />
安装日期	‎1/‎21/‎2023<br />
操作系统版本	25281.1000<br />
体验	Windows Feature Experience Pack 1000.25281.1000.0<br />
区域：美国</p>
<h3 id="开启虚拟机设置"><a class="markdownIt-Anchor" href="#开启虚拟机设置"></a> 开启虚拟机设置</h3>
<p>使用 <code>win</code> 键打开搜素框， 键入 <strong>windows功能</strong> ，打开设置后 选中 <em>虚拟机平台</em> , 点按确定后将提示重启设备，保存后个人工作后即可进行重启</p>
<h3 id="安装好adb"><a class="markdownIt-Anchor" href="#安装好adb"></a> 安装好adb</h3>
<p>这一步是方便后续使用WSAtools GUI 安装 APK文件</p>
<hr />
<h1 id="安装wsa"><a class="markdownIt-Anchor" href="#安装wsa"></a> 安装WSA</h1>
<p>去<a href="https://www.mediafire.com/file/obddq4979ucw2zn/WSA_2211.40000.10.0_x64_Release-Nightly-with-magisk-a468fd94(25205)-canary-MindTheGapps-13.0-RemovedAmazon.7z/file">网盘</a> 下载WSA andoroid13 预览版安装文件，下载后解压缩，重命名该文件夹为 <code>WSA</code> 方便后续使用命令行安装</p>
<p>解压缩后打开文件夹，右键 <strong>Install.ps1</strong> 文件，选择使用power shell 运行</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/dcwqlGV.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">一键部署安装
    </div>
</center>
<p>完成后即可看到play store magisk 自动安装上去</p>
<p>回到商店搜索 <strong>WSATools</strong> 安装即可， 这个是我们后续安装APK文件的地方</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/9eocoYp.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">WSATools
    </div>
</center>
<p>完成打开系统搜索框，会有一个 <em>子系统设置</em> 的项目，打开。</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/IVIpjJM.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">WSA设置
    </div>
</center>
<p>进去后在 <strong>系统 -&gt; 系统资源</strong> 勾选连续，以免后续使用WSATools 时可能会出现系统调度跟不上导致无法安装apk的情况</p>
<p>然后在 <strong>开发人员 -&gt; 开发人员模式</strong> 勾选打开。</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/hAMpS9v.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">开发人员模式
    </div>
</center>
<p>回到系统一栏，此时点击 <strong>文件</strong> 就可以出现WSA 运行的画面，这就完成了设置</p>
<p>然后打开 WSATools 项目，在右下角的设置图标中打开设置，配置上自己 ADB 的可执行文件路径，此时便可以使用 WSATools 安装apk 文件了</p>
<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"
    src="https://i.imgur.com/cE1Og8j.png">
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">根据自己安装位置修改
    </div>
</center>
]]></content>
      <tags>
        <tag>WSA 安装教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/16107/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h1 id="为什么想做一个网站"><a class="markdownIt-Anchor" href="#为什么想做一个网站"></a> 为什么想做一个网站</h1>
<p>本来想注册个自己的域名的，结果发现自己名字.com的域名被购买了，还被重定向到黄网了，一怒之下花了10刀买了个类似的域名占坑，一方面丢自己的博客，另一方面给自己的梯子套CDN，还有打算做一个自己的CV备用。</p>
]]></content>
  </entry>
</search>
